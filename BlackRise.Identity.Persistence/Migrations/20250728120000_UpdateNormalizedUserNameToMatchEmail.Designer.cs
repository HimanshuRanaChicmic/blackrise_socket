// <auto-generated />
using System;
using BlackRise.Identity.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BlackRise.Identity.Persistence.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20250728120000_UpdateNormalizedUserNameToMatchEmail")]
    partial class UpdateNormalizedUserNameToMatchEmail
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BlackRise.Identity.Domain.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8347abf-f51e-4dda-ba8d-2b3393a4aa63"),
                            ConcurrencyStamp = "ff3ef92a-9757-468c-a3ec-00a14209fb2c",
                            CreatedBy = new Guid("912c3a8a-d59d-4b7d-876a-3dd93a21c461"),
                            CreatedDate = new DateTime(2025, 7, 10, 10, 8, 57, 887, DateTimeKind.Utc).AddTicks(9542),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedBy = new Guid("912c3a8a-d59d-4b7d-876a-3dd93a21c461"),
                            ModifiedDate = new DateTime(2025, 7, 10, 10, 8, 57, 887, DateTimeKind.Utc).AddTicks(9543),
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("4a9d216c-4f7f-429d-9a28-a084526ce818"),
                            ConcurrencyStamp = "65b48457-7e70-4361-8cc0-7e7c46bc9dac",
                            CreatedBy = new Guid("912c3a8a-d59d-4b7d-876a-3dd93a21c461"),
                            CreatedDate = new DateTime(2025, 7, 10, 10, 8, 57, 887, DateTimeKind.Utc).AddTicks(9547),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedBy = new Guid("912c3a8a-d59d-4b7d-876a-3dd93a21c461"),
                            ModifiedDate = new DateTime(2025, 7, 10, 10, 8, 57, 887, DateTimeKind.Utc).AddTicks(9548),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("920c0369-9b15-493d-b576-d806a271f748"),
                            ConcurrencyStamp = "02722f18-b994-445e-9cb4-37197481e878",
                            CreatedBy = new Guid("912c3a8a-d59d-4b7d-876a-3dd93a21c461"),
                            CreatedDate = new DateTime(2025, 7, 10, 10, 8, 57, 887, DateTimeKind.Utc).AddTicks(9550),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedBy = new Guid("912c3a8a-d59d-4b7d-876a-3dd93a21c461"),
                            ModifiedDate = new DateTime(2025, 7, 10, 10, 8, 57, 887, DateTimeKind.Utc).AddTicks(9551),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("BlackRise.Identity.Domain.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("AppleId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("EmailConfirmationCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EmailConfirmationCodeExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProfileCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProfileCreated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSocialLogin")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ResetPasswordCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResetPasswordCodeExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("912c3a8a-d59d-4b7d-876a-3dd93a21c461"),
                            AccessFailedCount = 0,
                            AppleId = (string)null,
                            ConcurrencyStamp = "231d6055-699c-4e30-acdd-7e270ae493ac",
                            CreatedBy = new Guid("912c3a8a-d59d-4b7d-876a-3dd93a21c461"),
                            CreatedDate = new DateTime(2025, 7, 10, 10, 8, 57, 888, DateTimeKind.Utc).AddTicks(999),
                            Email = "super-admin@blackrise.com",
                            EmailConfirmationCode = (string)null,
                            EmailConfirmationCodeExpiry = (DateTime?)null,
                            EmailConfirmed = true,
                            IsActive = true,
                            IsDeleted = false,
                            IsProfileCompleted = false,
                            IsProfileCreated = false,
                            IsSocialLogin = false,
                            LockoutEnabled = false,
                            LockoutEnd = (DateTimeOffset?)null,
                            ModifiedBy = new Guid("912c3a8a-d59d-4b7d-876a-3dd93a21c461"),
                            ModifiedDate = new DateTime(2025, 7, 10, 10, 8, 57, 888, DateTimeKind.Utc).AddTicks(1000),
                            NormalizedEmail = "SUPER-ADMIN@BLACKRISE.COM",
                            NormalizedUserName = "SUPER-ADMIN@BLACKRISE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKXicol8fwCGM3eg1yzo2OHMjQxjc//+3bRfgpkqWW2arum2qRH2WiawLQ+ls7VUZw==",
                            PhoneNumber = (string)null,
                            PhoneNumberConfirmed = false,
                            ResetPasswordCode = (string)null,
                            ResetPasswordCodeExpiry = (DateTime?)null,
                            SecurityStamp = "b43e9e94-17a5-4f93-bb9f-2ebbf412187a",
                            TwoFactorEnabled = false,
                            UserName = "super-admin@blackrise.com"
                        },
                        new
                        {
                            Id = new Guid("23e09a08-ebde-4c5d-94f9-6a222c1a6362"),
                            AccessFailedCount = 0,
                            AppleId = (string)null,
                            ConcurrencyStamp = "231d6055-699c-4e30-acdd-7e270ae493ac",
                            CreatedBy = new Guid("a901293b-f4cd-4b50-93da-158bc435c1f9"),
                            CreatedDate = new DateTime(2025, 7, 10, 10, 8, 57, 888, DateTimeKind.Utc).AddTicks(1002),
                            Email = "admin@blackrise.com",
                            EmailConfirmationCode = (string)null,
                            EmailConfirmationCodeExpiry = (DateTime?)null,
                            EmailConfirmed = true,
                            IsActive = true,
                            IsDeleted = false,
                            IsProfileCompleted = false,
                            IsProfileCreated = false,
                            IsSocialLogin = false,
                            LockoutEnabled = false,
                            LockoutEnd = (DateTimeOffset?)null,
                            ModifiedBy = new Guid("8494a3ad-b74b-4407-a9ff-7a3f0c17770d"),
                            ModifiedDate = new DateTime(2025, 7, 10, 10, 8, 57, 888, DateTimeKind.Utc).AddTicks(1003),
                            NormalizedEmail = "ADMIN@BLACKRISE.COM",
                            NormalizedUserName = "ADMIN@BLACKRISE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKXicol8fwCGM3eg1yzo2OHMjQxjc//+3bRfgpkqWW2arum2qRH2WiawLQ+ls7VUZw==",
                            PhoneNumber = (string)null,
                            PhoneNumberConfirmed = false,
                            ResetPasswordCode = (string)null,
                            ResetPasswordCodeExpiry = (DateTime?)null,
                            SecurityStamp = "b43e9e94-17a5-4f93-bb9f-2ebbf412187a",
                            TwoFactorEnabled = false,
                            UserName = "admin@blackrise.com"
                        },
                        new
                        {
                            Id = new Guid("3e96af2d-c6f2-4f9e-843e-ada493a79a17"),
                            AccessFailedCount = 0,
                            AppleId = (string)null,
                            ConcurrencyStamp = "8c349594-2eb1-4b0b-9ff5-b8d473013cb9",
                            CreatedBy = new Guid("a901293b-f4cd-4b50-93da-158bc435c1f9"),
                            CreatedDate = new DateTime(2025, 7, 10, 10, 8, 57, 974, DateTimeKind.Utc).AddTicks(8858),
                            Email = "user@blackrise.com",
                            EmailConfirmationCode = (string)null,
                            EmailConfirmationCodeExpiry = (DateTime?)null,
                            EmailConfirmed = true,
                            IsActive = true,
                            IsDeleted = false,
                            IsProfileCompleted = false,
                            IsProfileCreated = false,
                            IsSocialLogin = false,
                            LockoutEnabled = false,
                            LockoutEnd = (DateTimeOffset?)null,
                            ModifiedBy = new Guid("8494a3ad-b74b-4407-a9ff-7a3f0c17770d"),
                            ModifiedDate = new DateTime(2025, 7, 10, 10, 8, 57, 974, DateTimeKind.Utc).AddTicks(8860),
                            NormalizedEmail = "USER@BLACKRISE.COM",
                            NormalizedUserName = "USER@BLACKRISE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKl2KvFyhuiau/kMnmzKO80juzWoLSkK9QN5E3JiStSULiAOaBjMALczWMFcfC252Q==",
                            PhoneNumber = (string)null,
                            PhoneNumberConfirmed = false,
                            ResetPasswordCode = (string)null,
                            ResetPasswordCodeExpiry = (DateTime?)null,
                            SecurityStamp = "b98e9771-fb3c-4182-91d9-d7d3ebfd8959",
                            TwoFactorEnabled = false,
                            UserName = "user@blackrise.com"
                        });
                });

            modelBuilder.Entity("BlackRise.Identity.Domain.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("BlackRise.Identity.Domain.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("BlackRise.Identity.Domain.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("912c3a8a-d59d-4b7d-876a-3dd93a21c461"),
                            RoleId = new Guid("c8347abf-f51e-4dda-ba8d-2b3393a4aa63")
                        },
                        new
                        {
                            UserId = new Guid("23e09a08-ebde-4c5d-94f9-6a222c1a6362"),
                            RoleId = new Guid("4a9d216c-4f7f-429d-9a28-a084526ce818")
                        },
                        new
                        {
                            UserId = new Guid("3e96af2d-c6f2-4f9e-843e-ada493a79a17"),
                            RoleId = new Guid("920c0369-9b15-493d-b576-d806a271f748")
                        });
                });

            modelBuilder.Entity("BlackRise.Identity.Domain.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("BlackRise.Identity.Domain.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("BlackRise.Identity.Domain.ApplicationUserClaim", b =>
                {
                    b.HasOne("BlackRise.Identity.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlackRise.Identity.Domain.ApplicationUserLogin", b =>
                {
                    b.HasOne("BlackRise.Identity.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlackRise.Identity.Domain.ApplicationUserRole", b =>
                {
                    b.HasOne("BlackRise.Identity.Domain.ApplicationRole", "Role")
                        .WithMany("Roles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlackRise.Identity.Domain.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlackRise.Identity.Domain.ApplicationUserToken", b =>
                {
                    b.HasOne("BlackRise.Identity.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlackRise.Identity.Domain.ApplicationRoleClaim", b =>
                {
                    b.HasOne("BlackRise.Identity.Domain.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
} 